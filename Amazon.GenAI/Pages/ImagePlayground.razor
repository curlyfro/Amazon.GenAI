@page "/image-playground"
@using Amazon.Bedrock.Model;
@using System.Text;
@using Amazon.Bedrock;
@using Amazon.BedrockRuntime;
@using LangChain.Providers.Amazon.Bedrock
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject AmazonBedrockClient BedrockClient
@inject IJSRuntime JS

<MudText Typo="Typo.h3">Image Playground</MudText>
<MudStack>
    <MudCard>
        <MudCardContent>
            <MudSelect T="FoundationModelSummary" @bind-Value="_selectedModel" ToStringFunc="@_selectConverter" Required="true">
                @if (_foundationModels != null)
                {
                    foreach (var item in _foundationModels)
                    {
                        _selectedModel ??= item;
                        <MudSelectItem Value="@item" />
                    }
                }
            </MudSelect>
        </MudCardContent>
    </MudCard>
    <form method="post" @onsubmit="OnSubmit">
        <MudCard>
            <MudCardContent>
                <MudTextField Counter=0 id="PromptId" Label="Prompt" @bind-Value="_prompt" Lines=5 Variant="Variant.Outlined" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Disabled="@_isThinking" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    @if (_isThinking)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Thinking...</MudText>
                    }
                    else
                    {
                        <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Forward" Size="Size.Small"></MudIcon>
                        <MudText Class="ms-2">Submit</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </form>
    @if (_imageSrc != String.Empty)
    {
        <MudPaper id="ImageId" Class="d-flex justify-center">
            <MudImage Class="pa-4" Src="@_imageSrc"></MudImage>
        </MudPaper>
    }
</MudStack>

@code {
    private string _imageSrc = "";

    private bool _isThinking;

    private string? _prompt;

    private IEnumerable<FoundationModelSummary>? _foundationModels;

    private FoundationModelSummary? _selectedModel;

    readonly Func<FoundationModelSummary, string> _selectConverter = fms => string.Concat(fms?.ProviderName, " ", fms?.ModelName, " (", fms?.ModelId, ")");

    protected override async Task OnInitializedAsync()
    {
        var allModels = (await BedrockClient.ListFoundationModelsAsync(new ListFoundationModelsRequest())).ModelSummaries
            .Where(x => x.OutputModalities.Contains("IMAGE"))
            .OrderBy(x => x.ProviderName);
        _foundationModels = Constants.ListValidModels(allModels)!;

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnSubmit()
    {
        _isThinking = true;
        StateHasChanged();
        await Task.Delay(1);

        var rand = new Random();

        var llm = Constants.GetImageModelTypeById(_selectedModel?.ModelId!);
        var result = llm.GenerateImageAsync(_prompt, new BedrockImageSettings { Seed = rand.Next() });
        var base64String = Convert.ToBase64String(result.Result.Bytes);

        _imageSrc = $"data:image/jpeg;base64,{base64String}";
        _isThinking = false;
        StateHasChanged();
        await JS.InvokeVoidAsync("scrollToElement", "ImageId");
    }
}
