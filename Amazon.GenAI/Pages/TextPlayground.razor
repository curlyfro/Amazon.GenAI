@page "/text-playground"
@using Amazon.BedrockRuntime;
@using Amazon.Bedrock;
@using Amazon.Bedrock.Model;
@using LangChain.Providers
@using LangChain.Providers.Amazon.Bedrock
@using Markdig
@inject AmazonBedrockRuntimeClient BedrockRuntimeClient
@inject AmazonBedrockClient BedrockClient
@inject IJSRuntime JS


<MudText Typo="Typo.h3">Text Playground</MudText>
<MudStack>
    <MudCard>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="9">
                    <MudSelect T="FoundationModelSummary" @bind-Value="_selectedModel" ToStringFunc="@_selectConverter" Required="true">
                        @if (_foundationModels != null)
                        {
                            @foreach (var item in _foundationModels)
                            {
                                _selectedModel ??= item;
                                <MudSelectItem Value="@item" />
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
                    @if (_selectedModel is { ResponseStreamingSupported: true })
                    {
                        <MudSwitch @bind-Value="@StreamResponse" Label="Stream Response" Color="Color.Success" />
                    }
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    <form method="post" @onsubmit="OnSubmit">
        <MudCard>
            <MudCardContent>
                <MudTextField Counter=0 id="PromptId" Label="Prompt" @bind-Value="_prompt" Lines=5 Variant="Variant.Outlined" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Disabled="@_isThinking" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    @if (_isThinking)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Thinking...</MudText>
                    }
                    else
                    {
                        <MudIcon Class="ms-n1" Icon="@Icons.Material.Filled.Forward" Size="Size.Small"></MudIcon>
                        <MudText Class="ms-2">Submit</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </form>
    <MudCard>
        <MudCardContent>
            <MudField Id="ResponseField" Label="Response" Class="white-space-pre-line">
                @((MarkupString) Markdown.ToHtml(_outputText!))
            </MudField>
        </MudCardContent>
    </MudCard>
</MudStack>

@code {
    private IEnumerable<FoundationModelSummary>? _foundationModels;

    private FoundationModelSummary? _selectedModel;

    private string? _outputText = string.Empty;
    private string? _prompt;

    private bool _isThinking;

    private bool StreamResponse { get; set; }

    readonly Func<FoundationModelSummary, string> _selectConverter = fms => string.Concat(fms?.ProviderName, " ", fms?.ModelName, " (", fms?.ModelId, ")");

    protected override async Task OnInitializedAsync()
    {
        var allModels = (await BedrockClient.ListFoundationModelsAsync(new ListFoundationModelsRequest())).ModelSummaries
                    .Where(x => x.OutputModalities.Contains("TEXT"))
                    .OrderBy(x => x.ProviderName);

        _foundationModels = Constants.ListValidModels(allModels);

        await base.OnInitializedAsync();
        StateHasChanged();
    }

    private async Task OnSubmit()
    {
        _isThinking = true;
        _outputText = "";
        StateHasChanged();
        await Task.Delay(1);

        var llm = Constants.GetModelTypeById<ChatModel>(_selectedModel?.ModelId!);
        Task<ChatResponse> result = llm.GenerateAsync(_prompt!, new BedrockChatSettings { UseStreaming = StreamResponse });

        if (_selectedModel!.ResponseStreamingSupported)
        {
            llm.PartialResponseGenerated += (o, s) => ChunkReceived(o, s);
            llm.CompletedResponseGenerated += (o, s) => Completed(o, s);
        }
        else
        {
            await Completed(null, result.Result);
        }
    }

    private async Task Completed(object? sender, string? text)
    {
        await InvokeAsync(() =>
        {
            _isThinking = false;
            _outputText = text;
            StateHasChanged();
            return Task.CompletedTask;
        });
    }

    private async Task ChunkReceived(object? sender, string chunk)
    {
        await InvokeAsync(() =>
        {
            _outputText += chunk;
            StateHasChanged();
            return Task.CompletedTask;
        });
    }
}

