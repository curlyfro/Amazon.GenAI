<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LangChain.Splitters.Abstractions</name>
    </assembly>
    <members>
        <member name="T:LangChain.Splitters.Code.CodePart">
            <summary>
            Represents a part of a document.
            </summary>
            <param name="Name"></param>
            <param name="Content"></param>
            <param name="Type"></param>
        </member>
        <member name="M:LangChain.Splitters.Code.CodePart.#ctor(System.String,System.String,LangChain.Splitters.Code.CodePartType)">
            <summary>
            Represents a part of a document.
            </summary>
            <param name="Name"></param>
            <param name="Content"></param>
            <param name="Type"></param>
        </member>
        <member name="P:LangChain.Splitters.Code.CodePart.Name">
            <summary></summary>
        </member>
        <member name="P:LangChain.Splitters.Code.CodePart.Content">
            <summary></summary>
        </member>
        <member name="P:LangChain.Splitters.Code.CodePart.Type">
            <summary></summary>
        </member>
        <member name="P:LangChain.Splitters.Code.CodePart.Empty">
            <summary>
            Represents an empty document part.
            </summary>
        </member>
        <member name="T:LangChain.Splitters.Code.CodePartType">
            <summary>
            
            </summary>
        </member>
        <member name="F:LangChain.Splitters.Code.CodePartType.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:LangChain.Splitters.Code.CodePartType.Method">
            <summary>
            
            </summary>
        </member>
        <member name="F:LangChain.Splitters.Code.CodePartType.Constructor">
            <summary>
            
            </summary>
        </member>
        <member name="T:LangChain.Splitters.Code.ICodeCutter">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Code.ICodeCutter.CutAsync(System.String,System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Trims the selected text so that it includes only the required things and the specified names after splitting.
            </summary>
            <param name="requiredNames"></param>
            <param name="cancellationToken"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Splitters.Code.ICodeSplitter">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Code.ICodeSplitter.SplitAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Divides a document into its component parts, returning the title, type, and content of each part.
            </summary>
            <param name="content"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Splitters.Text.CharacterTextSplitter">
            <summary>
            Implementation of splitting text that looks at characters
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Text.CharacterTextSplitter.#ctor(System.String,System.Int32,System.Int32,System.Func{System.String,System.Int32})">
            <summary>
            Implementation of splitting text that looks at characters
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Text.CharacterTextSplitter.SplitText(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:LangChain.Splitters.Text.ITextSplitter">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Text.ITextSplitter.SplitText(System.String)">
            <summary>
            Divides a chunk of text into smaller chunks.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Splitters.Text.MarkdownHeaderTextSplitter">
            <inheritdoc/>
        </member>
        <member name="M:LangChain.Splitters.Text.MarkdownHeaderTextSplitter.#ctor(System.String[],System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:LangChain.Splitters.Text.MarkdownHeaderTextSplitter.SplitText(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:LangChain.Splitters.Text.RecursiveCharacterTextSplitter">
            <summary>
            Implementation of splitting text that looks at characters.
            Recursively tries to split by different characters to find one
            that works.
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Text.RecursiveCharacterTextSplitter.#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.Int32,System.Int32,System.Func{System.String,System.Int32})">
            <summary>
            Implementation of splitting text that looks at characters.
            Recursively tries to split by different characters to find one
            that works.
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Text.RecursiveCharacterTextSplitter.SplitText(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:LangChain.Splitters.Text.TextSplitter">
            <summary>
            Functionality for splitting text.
            <remarks>
            - ported from langchain/text_splitter.py
            
            </remarks>
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Text.TextSplitter.#ctor(System.Int32,System.Int32,System.Func{System.String,System.Int32})">
            <summary>
            
            </summary>
            <param name="chunkSize"></param>
            <param name="chunkOverlap"></param>
            <param name="lengthFunction"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:LangChain.Splitters.Text.TextSplitter.ChunkSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Splitters.Text.TextSplitter.ChunkOverlap">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Text.TextSplitter.SplitText(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Splitters.Text.TextSplitter.JoinDocs(System.Collections.Generic.IReadOnlyList{System.String},System.String)">
            <summary>
            Joins a list of strings with a separator and returns null if the resulting string is empty
            </summary>
        </member>
        <member name="M:LangChain.Splitters.Text.TextSplitter.MergeSplits(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Merges a list of texts into chunks of size chunk_size with overlap
            </summary>
        </member>
    </members>
</doc>
