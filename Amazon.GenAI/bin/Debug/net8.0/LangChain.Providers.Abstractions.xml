<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LangChain.Providers.Abstractions</name>
    </assembly>
    <members>
        <member name="E:LangChain.Providers.ChatModel.PartialResponseGenerated">
            <inheritdoc cref="E:LangChain.Providers.IChatModel.PartialResponseGenerated"/>
        </member>
        <member name="E:LangChain.Providers.ChatModel.CompletedResponseGenerated">
            <inheritdoc cref="E:LangChain.Providers.IChatModel.CompletedResponseGenerated"/>
        </member>
        <member name="E:LangChain.Providers.ChatModel.PromptSent">
            <inheritdoc cref="E:LangChain.Providers.IChatModel.PromptSent"/>
        </member>
        <member name="T:LangChain.Providers.ChatModelExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:LangChain.Providers.ChatModelExtensions.EnsureNumbersOfTokensBelowContextLength(LangChain.Providers.IChatModel,System.Int32)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.ChatModelExtensions.EnsureNumbersOfTokensBelowContextLength(LangChain.Providers.IChatModelWithTokenCounting,System.String)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.ChatModelExtensions.EnsureNumbersOfTokensBelowContextLength(LangChain.Providers.IChatModelWithTokenCounting,System.Collections.Generic.IReadOnlyCollection{LangChain.Providers.Message})">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.ChatModelExtensions.EnsureNumbersOfTokensBelowContextLength(LangChain.Providers.IChatModelWithTokenCounting,LangChain.Providers.ChatRequest)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.ChatRequest">
            <summary>
            Base class for chat requests.
            </summary>
        </member>
        <member name="P:LangChain.Providers.ChatRequest.Messages">
            <summary>
            Defines the messages for the request.
            </summary>
        </member>
        <member name="M:LangChain.Providers.ChatRequest.op_Implicit(System.String)~LangChain.Providers.ChatRequest">
            <inheritdoc cref="M:LangChain.Providers.ChatRequest.ToChatRequest(System.String)"/>
        </member>
        <member name="M:LangChain.Providers.ChatRequest.op_Implicit(LangChain.Providers.Message)~LangChain.Providers.ChatRequest">
            <inheritdoc cref="M:LangChain.Providers.ChatRequest.ToChatRequest(LangChain.Providers.Message)"/>
        </member>
        <member name="M:LangChain.Providers.ChatRequest.op_Implicit(LangChain.Providers.Message[])~LangChain.Providers.ChatRequest">
            <inheritdoc cref="M:LangChain.Providers.ChatRequest.ToChatRequest(System.String)"/>
        </member>
        <member name="M:LangChain.Providers.ChatRequest.ToChatRequest(System.String)">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.ChatRequest"/>. <br/>
            Will be converted to a <see cref="T:LangChain.Providers.ChatRequest"/>
            with a single <see cref="T:LangChain.Providers.Message"/> of <see cref="F:LangChain.Providers.MessageRole.System"/>
            with the content of the string.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.ChatRequest.ToChatRequest(LangChain.Providers.Message)">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.ChatRequest"/>.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.ChatRequest.ToChatRequest(System.Collections.Generic.IReadOnlyCollection{LangChain.Providers.Message})">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.ChatRequest"/>.
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.ChatResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Providers.ChatResponse.Messages">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Providers.ChatResponse.UsedSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Providers.ChatResponse.Usage">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Providers.ChatResponse.LastMessageContent">
            <summary>
            Returns the last message content.
            </summary>
        </member>
        <member name="M:LangChain.Providers.ChatResponse.ToString">
            <inheritdoc />
        </member>
        <member name="T:LangChain.Providers.ChatSettings">
            <summary>
            Base class for chat request settings.
            </summary>
        </member>
        <member name="P:LangChain.Providers.ChatSettings.User">
            <summary>
            Unique user identifier.
            </summary>
        </member>
        <member name="P:LangChain.Providers.ChatSettings.StopSequences">
            <summary>
            Defines the stop sequences for the model.
            </summary>
        </member>
        <member name="P:LangChain.Providers.ChatSettings.UseStreaming">
            <summary>
            Sampling temperature
            </summary>
        </member>
        <member name="M:LangChain.Providers.ChatSettings.Calculate(LangChain.Providers.ChatSettings,LangChain.Providers.ChatSettings,LangChain.Providers.ChatSettings)">
            <summary>
            Calculate the settings to use for the request.
            </summary>
            <param name="requestSettings"></param>
            <param name="modelSettings"></param>
            <param name="providerSettings"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:LangChain.Providers.IChatModel">
            <summary>
            Defines a large language model that can be used for chat.
            </summary>
        </member>
        <member name="P:LangChain.Providers.IChatModel.ContextLength">
            <summary>
            Max input tokens for the model.
            </summary>
        </member>
        <member name="E:LangChain.Providers.IChatModel.PartialResponseGenerated">
            <summary>
            Occurs when token generated in streaming mode.
            </summary>
        </member>
        <member name="E:LangChain.Providers.IChatModel.CompletedResponseGenerated">
            <summary>
            Occurs when completed response generated.
            </summary>
        </member>
        <member name="E:LangChain.Providers.IChatModel.PromptSent">
            <summary>
            Occurs before prompt is sent to the model.
            </summary>
        </member>
        <member name="M:LangChain.Providers.IChatModel.GenerateAsync(LangChain.Providers.ChatRequest,LangChain.Providers.ChatSettings,System.Threading.CancellationToken)">
            <summary>
            Run the LLM on the given prompt and input.
            </summary>
            <param name="request"></param>
            <param name="settings"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.IChatModelWithTokenCounting">
            <summary>
            
            </summary>
        </member>
        <member name="T:LangChain.Providers.IChatModel`3">
            <summary>
            Defines a large language model that can be used for chat.
            </summary>
        </member>
        <member name="M:LangChain.Providers.IChatModel`3.GenerateAsync(`0,`2,System.Threading.CancellationToken)">
            <summary>
            Run the LLM on the given prompt and input.
            </summary>
            <param name="request"></param>
            <param name="settings"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.IPaidLargeLanguageModel">
            <summary>
            Interface for models offering tokens for money.
            </summary>
        </member>
        <member name="M:LangChain.Providers.IPaidLargeLanguageModel.CalculatePriceInUsd(System.Int32,System.Int32)">
            <summary>
            Returns the price for the given number of tokens in USD.
            </summary>
            <param name="inputTokens"></param>
            <param name="outputTokens"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.ISupportsCountTokens">
            <summary>
            Defines a large language model that supports counting tokens.
            </summary>
        </member>
        <member name="M:LangChain.Providers.ISupportsCountTokens.CountTokens(System.String)">
            <summary>
            Counts the number of tokens in the given prompt and input.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.ISupportsCountTokens.CountTokens(System.Collections.Generic.IReadOnlyCollection{LangChain.Providers.Message})">
            <summary>
            Counts the number of tokens in the given prompt and input.
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.ISupportsCountTokens.CountTokens(LangChain.Providers.ChatRequest)">
            <summary>
            Counts the number of tokens in the given prompt and input.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.Message">
            <summary>
            
            </summary>
            <param name="Content"></param>
            <param name="Role"></param>
            <param name="FunctionName"></param>
        </member>
        <member name="M:LangChain.Providers.Message.#ctor(System.String,LangChain.Providers.MessageRole,System.String)">
            <summary>
            
            </summary>
            <param name="Content"></param>
            <param name="Role"></param>
            <param name="FunctionName"></param>
        </member>
        <member name="P:LangChain.Providers.Message.Content">
            <summary></summary>
        </member>
        <member name="P:LangChain.Providers.Message.Role">
            <summary></summary>
        </member>
        <member name="P:LangChain.Providers.Message.FunctionName">
            <summary></summary>
        </member>
        <member name="M:LangChain.Providers.Message.Human(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.Message.Ai(System.String)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="P:LangChain.Providers.Message.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Providers.Message.op_Addition(LangChain.Providers.Message,LangChain.Providers.Message)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.Message.Add(LangChain.Providers.Message,LangChain.Providers.Message)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.Message.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.MessageRole">
            <summary>
            
            </summary>
        </member>
        <member name="F:LangChain.Providers.MessageRole.System">
            <summary>
            Role of message that is a system role.
            </summary>
        </member>
        <member name="F:LangChain.Providers.MessageRole.Human">
            <summary>
            Role of message that is spoken by the human.
            </summary>
        </member>
        <member name="F:LangChain.Providers.MessageRole.Ai">
            <summary>
            Role of message that is spoken by the AI.
            </summary>
        </member>
        <member name="F:LangChain.Providers.MessageRole.Chat">
            <summary>
            Role of message with arbitrary speaker.
            </summary>
        </member>
        <member name="F:LangChain.Providers.MessageRole.FunctionCall">
            <summary>
            Role of message that defines a function call request.
            </summary>
        </member>
        <member name="F:LangChain.Providers.MessageRole.FunctionResult">
            <summary>
            Role of message that defines a function call response.
            </summary>
        </member>
        <member name="T:LangChain.Providers.MessageStringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Providers.MessageStringExtensions.AsSystemMessage(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.MessageStringExtensions.AsHumanMessage(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.MessageStringExtensions.AsAiMessage(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.MessageStringExtensions.AsChatMessage(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.MessageStringExtensions.AsFunctionCallMessage(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.MessageStringExtensions.AsFunctionResultMessage(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.MessageStringExtensions.AsHistory(System.Collections.Generic.IReadOnlyCollection{LangChain.Providers.Message})">
            <summary>
            
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.ImageData">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Providers.ImageData.op_Implicit(System.String)~LangChain.Providers.ImageData">
            <inheritdoc cref="M:LangChain.Providers.ImageData.ToImageData(System.String)"/>
        </member>
        <member name="M:LangChain.Providers.ImageData.ToImageData(System.String)">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.ImageData"/>. <br/>
            Will be converted to a <see cref="T:LangChain.Providers.ImageData"/>
            with non null Base64 property.
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.IMaximumInputTokens">
            <summary>
            Defined a model with maximum input tokens.
            </summary>
        </member>
        <member name="P:LangChain.Providers.IMaximumInputTokens.MaximumInputTokens">
            <summary>
            
            </summary>
        </member>
        <member name="T:LangChain.Providers.IModel">
            <summary>
            Defines a common model properties.
            </summary>
        </member>
        <member name="P:LangChain.Providers.IModel.Id">
            <summary>
            Id of the model.
            </summary>
        </member>
        <member name="P:LangChain.Providers.IModel.Usage">
            <summary>
            Total usage of current model/provider.
            </summary>
        </member>
        <member name="T:LangChain.Providers.IModel`1">
            <summary>
            Defines a common model properties.
            </summary>
        </member>
        <member name="P:LangChain.Providers.IModel`1.Settings">
            <summary>
            Defines the settings for the model. <br/>
            These settings will be used as default settings for requests,
            but you can override them in the request. <br/>
            If not set, the model will try to use the provider chat settings or default settings in other cases. <br/>
            </summary>
        </member>
        <member name="T:LangChain.Providers.IProvider">
            <summary>
            Defines a provider. Can provide large language models, embeddings, text to speech, speech to text, etc. <br/>
            Should define authentication and total usage.
            </summary>
        </member>
        <member name="P:LangChain.Providers.IProvider.ChatSettings">
            <summary>
            Defines the settings for the provider. <br/>
            These settings will be used as default settings for requests,
            but you can override them in the model or request. <br/>
            If not set, the model will use default settings for specific provider. <br/>
            </summary>
        </member>
        <member name="P:LangChain.Providers.IProvider.EmbeddingSettings">
            <summary>
            Defines the settings for the provider. <br/>
            These settings will be used as default settings for requests,
            but you can override them in the model or request. <br/>
            If not set, the model will use default settings for specific provider. <br/>
            </summary>
        </member>
        <member name="P:LangChain.Providers.IProvider.ImageGenerationSettings">
            <summary>
            Defines the settings for the provider. <br/>
            These settings will be used as default settings for requests,
            but you can override them in the model or request. <br/>
            If not set, the model will use default settings for specific provider. <br/>
            </summary>
        </member>
        <member name="P:LangChain.Providers.IProvider.ModerationSettings">
            <summary>
            Defines the settings for the provider. <br/>
            These settings will be used as default settings for requests,
            but you can override them in the model or request. <br/>
            If not set, the model will use default settings for specific provider. <br/>
            </summary>
        </member>
        <member name="P:LangChain.Providers.IProvider.SpeechToTextSettings">
            <summary>
            Defines the settings for the provider. <br/>
            These settings will be used as default settings for requests,
            but you can override them in the model or request. <br/>
            If not set, the model will use default settings for specific provider. <br/>
            </summary>
        </member>
        <member name="P:LangChain.Providers.IProvider.TextToSpeechSettings">
            <summary>
            Defines the settings for the provider. <br/>
            These settings will be used as default settings for requests,
            but you can override them in the model or request. <br/>
            If not set, the model will use default settings for specific provider. <br/>
            </summary>
        </member>
        <member name="P:LangChain.Providers.Model.Id">
            <inheritdoc/>
        </member>
        <member name="P:LangChain.Providers.Model.Usage">
            <inheritdoc/>
        </member>
        <member name="P:LangChain.Providers.Model`1.Settings">
            <inheritdoc cref="P:LangChain.Providers.IModel`1.Settings"/>
        </member>
        <member name="T:LangChain.Providers.Provider">
            <inheritdoc cref="T:LangChain.Providers.IProvider" />
        </member>
        <member name="M:LangChain.Providers.Provider.#ctor(System.String)">
            <inheritdoc cref="T:LangChain.Providers.IProvider" />
        </member>
        <member name="P:LangChain.Providers.Provider.ChatSettings">
            <inheritdoc />
        </member>
        <member name="P:LangChain.Providers.Provider.EmbeddingSettings">
            <inheritdoc />
        </member>
        <member name="P:LangChain.Providers.Provider.ImageGenerationSettings">
            <inheritdoc />
        </member>
        <member name="P:LangChain.Providers.Provider.ModerationSettings">
            <inheritdoc />
        </member>
        <member name="P:LangChain.Providers.Provider.SpeechToTextSettings">
            <inheritdoc />
        </member>
        <member name="P:LangChain.Providers.Provider.TextToSpeechSettings">
            <inheritdoc />
        </member>
        <member name="T:LangChain.Providers.Usage">
            <summary>
            
            </summary>
            <param name="InputTokens"></param>
            <param name="OutputTokens"></param>
            <param name="Messages"></param>
            <param name="Time"></param>
            <param name="PriceInUsd"></param>
        </member>
        <member name="M:LangChain.Providers.Usage.#ctor(System.Int32,System.Int32,System.Int32,System.TimeSpan,System.Double)">
            <summary>
            
            </summary>
            <param name="InputTokens"></param>
            <param name="OutputTokens"></param>
            <param name="Messages"></param>
            <param name="Time"></param>
            <param name="PriceInUsd"></param>
        </member>
        <member name="P:LangChain.Providers.Usage.InputTokens">
            <summary></summary>
        </member>
        <member name="P:LangChain.Providers.Usage.OutputTokens">
            <summary></summary>
        </member>
        <member name="P:LangChain.Providers.Usage.Messages">
            <summary></summary>
        </member>
        <member name="P:LangChain.Providers.Usage.Time">
            <summary></summary>
        </member>
        <member name="P:LangChain.Providers.Usage.PriceInUsd">
            <summary></summary>
        </member>
        <member name="P:LangChain.Providers.Usage.Empty">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Providers.Usage.TotalTokens">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Providers.Usage.op_Addition(LangChain.Providers.Usage,LangChain.Providers.Usage)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.Usage.op_Subtraction(LangChain.Providers.Usage,LangChain.Providers.Usage)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.Usage.op_Multiply(LangChain.Providers.Usage,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.Usage.op_Division(LangChain.Providers.Usage,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.Usage.Add(LangChain.Providers.Usage,LangChain.Providers.Usage)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.Usage.Multiply(LangChain.Providers.Usage,System.Double)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.Usage.Divide(LangChain.Providers.Usage,System.Double)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:LangChain.Providers.Usage.Subtract(LangChain.Providers.Usage,LangChain.Providers.Usage)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:LangChain.Providers.EmbeddingRequest">
            <summary>
            Base class for embedding requests.
            </summary>
        </member>
        <member name="M:LangChain.Providers.EmbeddingRequest.op_Implicit(System.String)~LangChain.Providers.EmbeddingRequest">
            <inheritdoc cref="M:LangChain.Providers.EmbeddingRequest.ToEmbeddingRequest(System.String)"/>
        </member>
        <member name="M:LangChain.Providers.EmbeddingRequest.op_Implicit(System.String[])~LangChain.Providers.EmbeddingRequest">
            <inheritdoc cref="M:LangChain.Providers.EmbeddingRequest.ToEmbeddingRequest(System.String)"/>
        </member>
        <member name="M:LangChain.Providers.EmbeddingRequest.ToEmbeddingRequest(System.String)">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.EmbeddingRequest"/>. <br/>
            Will be converted to a <see cref="T:LangChain.Providers.EmbeddingRequest"/>
            with a single string.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.EmbeddingRequest.ToEmbeddingRequest(System.String[])">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.EmbeddingRequest"/>. <br/>
            </summary>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.EmbeddingResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Providers.EmbeddingResponse.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Providers.EmbeddingResponse.UsedSettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:LangChain.Providers.EmbeddingSettings">
            <summary>
            Base class for embedding request settings.
            </summary>
        </member>
        <member name="T:LangChain.Providers.IEmbeddingModel">
            <summary>
            Interface for embedding models.
            </summary>
        </member>
        <member name="P:LangChain.Providers.IEmbeddingModel.MaximumInputLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Providers.IEmbeddingModel.CreateEmbeddingsAsync(LangChain.Providers.EmbeddingRequest,LangChain.Providers.EmbeddingSettings,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="settings"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.IImageGenerationModel">
            <summary>
            
            </summary>
        </member>
        <member name="E:LangChain.Providers.IImageGenerationModel.PromptSent">
            <summary>
            Occurs before prompt is sent to the model.
            </summary>
        </member>
        <member name="M:LangChain.Providers.IImageGenerationModel.GenerateImageAsync(LangChain.Providers.ImageGenerationRequest,LangChain.Providers.ImageGenerationSettings,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="settings"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="E:LangChain.Providers.ImageGenerationModel.PromptSent">
            <inheritdoc cref="E:LangChain.Providers.IChatModel.PromptSent"/>
        </member>
        <member name="T:LangChain.Providers.ImageGenerationRequest">
            <summary>
            Base class for image generation requests.
            </summary>
        </member>
        <member name="M:LangChain.Providers.ImageGenerationRequest.op_Implicit(System.String)~LangChain.Providers.ImageGenerationRequest">
            <inheritdoc cref="M:LangChain.Providers.ImageGenerationRequest.ToImageGenerationRequest(System.String)"/>
        </member>
        <member name="M:LangChain.Providers.ImageGenerationRequest.ToImageGenerationRequest(System.String)">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.ImageGenerationRequest"/>. <br/>
            Will be converted to a <see cref="T:LangChain.Providers.ImageGenerationRequest"/>
            with a prompt and default settings.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.ImageGenerationResponse">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Providers.ImageGenerationResponse.UsedSettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:LangChain.Providers.ImageGenerationSettings">
            <summary>
            Base class for image generation request settings.
            </summary>
        </member>
        <member name="T:LangChain.Providers.IModerationModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:LangChain.Providers.IModerationModel.RecommendedModerationChunkSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Providers.IModerationModel.CheckViolationAsync(LangChain.Providers.ModerationRequest,LangChain.Providers.ModerationSettings,System.Threading.CancellationToken)">
            <summary>
            Given a input text, returns true if the model classifies it as violating provider content policy.
            </summary>
            <param name="request"></param>
            <param name="settings"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.ModerationRequest">
            <summary>
            Base class for embedding requests.
            </summary>
        </member>
        <member name="M:LangChain.Providers.ModerationRequest.op_Implicit(System.String)~LangChain.Providers.ModerationRequest">
            <inheritdoc cref="M:LangChain.Providers.ModerationRequest.ToModerationRequest(System.String)"/>
        </member>
        <member name="M:LangChain.Providers.ModerationRequest.ToModerationRequest(System.String)">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.ModerationRequest"/>. <br/>
            Will be converted to a <see cref="T:LangChain.Providers.ModerationRequest"/>
            with a prompt and default settings.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.ModerationResponse">
            <summary>
            
            </summary>
        </member>
        <member name="T:LangChain.Providers.ModerationSettings">
            <summary>
            Base class for moderation request settings.
            </summary>
        </member>
        <member name="T:LangChain.Providers.ISpeechToTextModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Providers.ISpeechToTextModel.TranscribeAsync(LangChain.Providers.SpeechToTextRequest,LangChain.Providers.SpeechToTextSettings,System.Threading.CancellationToken)">
            <summary>
            Transcribes audio to text.
            </summary>
            <param name="request"></param>
            <param name="settings"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.SpeechToTextRequest">
            <summary>
            Base class for speech-to-text requests.
            </summary>
        </member>
        <member name="M:LangChain.Providers.SpeechToTextRequest.op_Implicit(System.IO.Stream)~LangChain.Providers.SpeechToTextRequest">
            <inheritdoc cref="M:LangChain.Providers.SpeechToTextRequest.ToSpeechToTextRequest(System.IO.Stream)"/>
        </member>
        <member name="M:LangChain.Providers.SpeechToTextRequest.op_Implicit(System.Byte[])~LangChain.Providers.SpeechToTextRequest">
            <inheritdoc cref="M:LangChain.Providers.SpeechToTextRequest.ToSpeechToTextRequest(System.Byte[])"/>
        </member>
        <member name="M:LangChain.Providers.SpeechToTextRequest.op_Implicit(System.String)~LangChain.Providers.SpeechToTextRequest">
            <inheritdoc cref="M:LangChain.Providers.SpeechToTextRequest.ToSpeechToTextRequest(System.String)"/>
        </member>
        <member name="M:LangChain.Providers.SpeechToTextRequest.ToSpeechToTextRequest(System.IO.Stream)">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.SpeechToTextRequest"/>. <br/>
            Will be converted to a <see cref="T:LangChain.Providers.SpeechToTextRequest"/>
            with a stream and default settings.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.SpeechToTextRequest.ToSpeechToTextRequest(System.Byte[])">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.SpeechToTextRequest"/>. <br/>
            Will be converted to a <see cref="T:LangChain.Providers.SpeechToTextRequest"/>
            with a MemoryStream of current bytes and default settings.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:LangChain.Providers.SpeechToTextRequest.ToSpeechToTextRequest(System.String)">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.SpeechToTextRequest"/>. <br/>
            Will be converted to a <see cref="T:LangChain.Providers.SpeechToTextRequest"/>
            with a FileStream of this path and default settings.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.SpeechToTextResponse">
            <summary>
            
            </summary>
        </member>
        <member name="T:LangChain.Providers.SpeechToTextSettings">
            <summary>
            Base class for speech-to-text request settings.
            </summary>
        </member>
        <member name="T:LangChain.Providers.ITextToSpeechModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:LangChain.Providers.ITextToSpeechModel.GenerateSpeechAsync(LangChain.Providers.TextToSpeechRequest,LangChain.Providers.TextToSpeechSettings,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="settings"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.TextToSpeechRequest">
            <summary>
            Base class for text-to-speech requests.
            </summary>
        </member>
        <member name="M:LangChain.Providers.TextToSpeechRequest.op_Implicit(System.String)~LangChain.Providers.TextToSpeechRequest">
            <inheritdoc cref="M:LangChain.Providers.TextToSpeechRequest.ToTextToSpeechRequest(System.String)"/>
        </member>
        <member name="M:LangChain.Providers.TextToSpeechRequest.ToTextToSpeechRequest(System.String)">
            <summary>
            Explicitly converts a string to a <see cref="T:LangChain.Providers.TextToSpeechRequest"/>. <br/>
            Will be converted to a <see cref="T:LangChain.Providers.TextToSpeechRequest"/>
            with a prompt and default settings.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:LangChain.Providers.TextToSpeechResponse">
            <summary>
            
            </summary>
        </member>
        <member name="T:LangChain.Providers.TextToSpeechSettings">
            <summary>
            Base class for text-to-speech request settings.
            </summary>
        </member>
    </members>
</doc>
